use std::collections::HashMap;

pub struct Interner<'src> {
    symbols: HashMap<&'src str, Symbol>,
    strings: Vec<&'src str>,
}

impl<'src> Interner<'src> {
    pub fn new() -> Interner<'src> {
        Interner {
            symbols: HashMap::new(),
            strings: Vec::new(),
        }
    }

    fn symbol(&self) -> Symbol {
        Symbol(self.strings.len() as _)
    }

    pub fn get(&self, symbol: Symbol) -> &'src str {
        let idx = symbol.0 as usize;

        // Safety: symbols can only be generated by the interner
        // itself, so the `get_unchecked` are satisfied.
        unsafe { self.strings.get_unchecked(idx) }
    }

    pub fn intern(&mut self, s: &'src str) -> Symbol {
        if let Some(symbol) = self.symbols.get(s).copied() {
            return symbol;
        }

        let symbol = self.symbol();
        self.strings.push(s);
        self.symbols.insert(s, symbol);

        symbol
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Symbol(u32);
